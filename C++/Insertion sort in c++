Input: 
======
5
30 50 40 20 10

Algorithm Steps:
================
> Start with the second element, 50. Compare it with the sorted part
    - No Swap between 30 and 50
> Move to the next unsorted element, 40, and compare it with the sorted part
    - Swap 50 and 40 because 40 is smaller
    - Insert 40 in its correct position
> Continue with 20:
    - Swap 50 and 20 because 20 is smaller
    - Swap 40 and 20 because 20 is smaller
    - Swap 30 and 20 because 20 is smaller
    - Insert 20 where it belongs
> Finally, work with 10:
    - Swap 50 and 10 because 10 is smaller
    - Swap 40 and 10 because 10 is smaller
    - Swap 30 and 10 because 10 is smaller
    - Swap 20 and 10 because 10 is smaller
    - Insert 10 where it belongs

Final sorted array: 10, 20, 30, 40, 50

Output:
=======
10 20 30 40 50

Pseudo Code
===========

for i from 1 to n-1
        j = i
        while(arr[j-1] > arr[j] & j >= 1)
                // Swap the arr[j-1] and arr[j]
        initialize new variable temp with arr[j]
        copy arr[j - 1] to arr[j]
        update arr[j - 1] with temp variable
                j = j-1

Explanation:

> Outer Loop (for i from 1 to n-1): 
   - This loop iterates through the array starting from the second element (since for sorting, we consider the first element as already sorted).
   - i is the index of the element to be inserted into the sorted part of the array.

> Inner Loop (while arr[j-1] > arr[j] & j >= 1):
   - For each iteration of the outer loop, the inner while loop compares the current element arr[j] with its preceding elements.
   - The condition arr[j-1] > arr[j] & j >= 1 ensures that the comparison is done as long as arr[j] is smaller than its preceding element and j has not reached the beginning of the array.

> Swapping Elements:
  - If the current element (arr[j]) is smaller than its previous element (arr[j-1]), the algorithm swaps these two elements.
  - This is done by:
      a) Temporarily storing the value of arr[j] in a new variable temp.
      b) Moving the larger element (arr[j-1]) one position forward to arr[j].
      c) Placing the smaller element (temp, which is the original arr[j]) in the previous position (arr[j-1]).
  - j is then decremented (j = j-1) to compare the current element with the next preceding element.

> Repeat Until Sorted:
  - This process is repeated until the current element arr[j] is no longer smaller than its preceding element or j reaches the beginning of the array.
  - The outer loop moves to the next element, and the process repeats until the entire array is sorted.


Code:
=====

#include <bits/stdc++.h>
using namespace std;
void insertionsort(int arr[], int n){
    for(int i = 1; i <= n-1; i++){
        int j = i;
        while((arr[j-1] > arr[j]) && j >= 1){
            int temp = arr[j-1];
            arr[j-1] = arr[j];
            arr[j] = temp;
            j--;
        }
    }
}
int main(){
    int n;
    cin >> n;
    int arr[n];
    for(int i = 0; i < n; i++) cin >> arr[i];
    insertionsort(arr,n);
    for(auto x: arr){
        cout << x << " ";
    }
        return 0;
}


Time Complexity Analysis:
=========================

> For i going from 1 to n-1:
    a) When i = 1, we perform 1 operation.
    b) When i = 2, we perform 2 operations.
    c) When i = n-1, we perform n-1 operations.

Time Complexity = 1 + 2 + 3 + ... + (n-1)
                = ((n-1) * (n-1+1))/2
                = (n * (n-1)) / 2
                = (n^2)/2 - n/2
                = O((n^2)/2 - n/2)
                = O(n^2)


Worst and Average Case Time Complexity of Insertion sort is 𝐎(𝐧^𝟐), where n is the size of array

*** Best Case Time Complexity *** 

Example

When the given array is already sorted

    arr[] = {5, 10, 15, 30, 40} -> best case

- Time Complexity will be O(n)

- i = 0: The first element, 5, is already in its correct position because there are no smaller elements before it

- i = 1: The second element, 10, is greater than the element before it (5). So, we leave it in place

- i = 2: The third element, 15, is greater than the element before it (10). So, we leave it in place

- i = 3: The fourth element, 30, is greater than the element before it (15). So, we leave it in place

- i = 4: The fifth element, 40, is greater than the element before it (30). So, we leave it in place

